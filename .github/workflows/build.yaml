name: Build and Publish

on:
## Trigger on pushes to main and tags with vX.X.X, and allow manual dispatch, we will publish images, otherwise just build.
  push:
    branches:
      - '**'
      - '!main'
    tags:
      - 'v*.*.*'
      - 'V*.*.*'
      - '*.*.*'
  workflow_dispatch:
    inputs:
      bump-type:
        description: 'Type of version bump (major, minor, patch)'
        required: false
        default: 'patch'
  pull_request:
    branches:
      - 'main'


permissions:
  contents: write
  packages: write


jobs:
  decision:
    runs-on: ubuntu-latest
    outputs:
      push_image: ${{ steps.decide.outputs.push_image }}
    steps:
      - name: Decide push or load
        id: decide
        run: |
          # Default: do not push
          push_image=false
          if [[ "${GITHUB_EVENT_NAME}" == "push" && ( "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_REF_TYPE}" ==  "tag" ) ]] || \
             [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" && "${GITHUB_REF}" == "refs/heads/main" ]] || \
             [[ "${GITHUB_EVENT_NAME}" == "pull_request" && "${GITHUB_REF}" == "refs/heads/main" ]]; then
            push_image=true
          fi
          echo "push_image=${push_image}" >> "$GITHUB_OUTPUT"
      - name: Debug decision
        run: |
          echo "GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME}"
          echo "GITHUB_REF=${GITHUB_REF}"
          echo "GITHUB_REF_TYPE=${GITHUB_REF_TYPE}"
          echo "push_image (output)=${{ steps.decide.outputs.push_image }}"

  deploy:
    needs: decision
    runs-on: ubuntu-latest
    steps:
        - name: Bump version
          id: bump
          uses: callowayproject/bump-my-version@master
          env:
            BUMPVERSION_TAG: "true"
          with:
            args: ${{ inputs.bump-type }}
            github-token: ${{ secrets.GITHUB_TOKEN }}

        - name: Check
          if: steps.bump.outputs.bumped == 'true'
          run: |
            echo "Version was bumped from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}!"

    
        - uses: actions/checkout@v5
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
              python-version: "3.x"
        - name: Install dependencies
          run: |
              python -m pip install --upgrade pip
              pip install setuptools wheel twine build
        - name: Build
          run: python -m build

        - name: Check
          if: steps.bump.outputs.bumped == 'true'
          run: |
            echo "Version was bumped from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}!"

        - name: Publish to PyPI
          if: needs.decision.outputs.push_image == 'true'
          env:
              TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
              TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          run: twine upload dist/*

  build:
    needs: [decision, deploy]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            baseimage: nvidia/cuda:12.9.0-cudnn-runtime-ubuntu22.04
            base_type: cuda
          - arch: aarch64
            platform: linux/arm64
            baseimage: nvidia/cuda:12.9.0-cudnn-runtime-ubuntu22.04
            base_type: cuda
          - arch: aarch64
            platform: linux/arm64/v8
            baseimage: python:3.11-slim-bookworm
            base_type: cpu
          - arch: amd64
            platform: linux/amd64
            baseimage: python:3.11-slim-bookworm
            base_type: cpu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image name
        run: |
          REPO="${{ github.repository }}"
          REPO_LC="${REPO,,}"
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${REPO_LC}_${{ matrix.arch }}-${{ matrix.base_type }}" >> $GITHUB_ENV

      - name: Debug push flag and tags
        run: |
          echo "push_image from decision: ${{ needs.decision.outputs.push_image }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"

      - name: Build and (optionally) push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/Dockerfile
          platforms: ${{ matrix.platform }}
          build-args: |
            BASEIMAGE=${{ matrix.baseimage }}
            ARCHITECTURE=${{ matrix.arch }}
            BASE_TYPE=${{ matrix.base_type }}
          tags: |
            ${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME }}:latest
            ${{ github.event_name == 'push' && (github.ref_type == 'tag') && format('{0}:{1}', env.IMAGE_NAME, github.ref_name) || '' }}
          push: ${{ needs.decision.outputs.push_image == 'true' }}
